# -*- coding: utf-8 -*-
"""ANÁLISIS DE DATOS - CEPRE - DISTRIBUCIÓN GEOGRÁFICA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eogHqjFW_chRR03IiYZS3H6xp9e5jNdb
"""

# CARGA DE DATASET Y LIBRERÍAS
import pandas as pd
import numpy as np

df = pd.read_csv('/content/sample_data/Datos_abiertos_cepre.csv')
df.head(6)

# AGREGAR COLUMNA 'CICLO' PARA CONSIDERAR EL DATO EN UNA SOLA COLUMNA
df['CICLO'] = df[['ANIO_POSTULA', 'CICLO_POSTULA']].astype(str).agg('-'.join, axis=1)
df['CICLO']

# REASIGNAMOS EL NOMBRE DE LA COLUMNA 'IDHASH' POR EL DE 'ALUMNOS' Y VALIDAMOS LA INFORMACIÓN DEL DF CON LA ACTUALIZACIÓN HASTA EL MOMENTO
df.rename(columns={'IDHASH': 'ALUMNOS'}, inplace=True)
df.info()

# CONTABILIZAR ALUMNOS INGRESANTES (ORDINARIO + DIRECTO) POR CICLO
gdf = df[df['INGRESO']=='SI'].groupby('CICLO')[['ALUMNOS']].count()
gdf

# GRAFICAMOS EL DF RESULTADO
ax_gdf=gdf.plot(kind='bar',figsize=(16,6),xlabel='CICLO',ylabel='CANTIDAD',title='CANTIDAD DE ALUMNOS INGRESANTES (ORDINARIO + DIRECTO) DE CEPRE-UNI POR CICLO',grid=True)
for container in ax_gdf.containers:
    ax_gdf.bar_label(container)

# CONTABILIZAR ALUMNOS INGRESANTES POR CEPRE-UNI (DIRECTO) POR CICLO
gdf2 = df[(df['INGRESO']=='SI') & (df['MODO_INGRESO']=='DIRECTO')].groupby('CICLO')[['ALUMNOS']].count()
gdf2

# GRAFICAMOS EL DF RESULTADO
ax_gdf2=gdf2.plot(kind='bar',figsize=(16,6),xlabel='CICLO',ylabel='CANTIDAD',title='CANTIDAD DE ALUMNOS INGRESANTES (DIRECTO) DE CEPRE-UNI POR CICLO',grid=True)
for container in ax_gdf2.containers:
    ax_gdf2.bar_label(container)

# CONTABILIZAR ALUMNOS INGRESANTES POR CEPRE-UNI DISTRIBUIDOS POR DEPARTAMENTO DE DOMICILIO POR CICLO
gdf3 = df[(df['INGRESO']=='SI') & (df['MODO_INGRESO']=='DIRECTO')].groupby('DOMICILIO_DEPA')[['ALUMNOS']].count()
gdf3

# CONTABILIZAR ALUMNOS INGRESANTES POR CEPRE-UNI DISTRIBUIDOS POR DEPARTAMENTO DE COLEGIO POR CICLO
gdf4 = df[(df['INGRESO']=='SI') & (df['MODO_INGRESO']=='DIRECTO')].groupby('COLEGIO_DEPA')[['ALUMNOS']].count()
gdf4

# CONTABILIZAR ALUMNOS INGRESANTES POR CEPRE-UNI DISTRIBUIDOS POR DEPARTAMENTO DE NACIMIENTO POR CICLO
gdf5 = df[(df['INGRESO']=='SI') & (df['MODO_INGRESO']=='DIRECTO')].groupby('NACIMIENTO_DEPA')[['ALUMNOS']].count()
gdf5

# PARA IDENTIFICAR Y ANALIZAR DATOS DE ALUMNOS CON DOMICILIO, COLEGIO Y NACIMIENTO, SE AGRUPARÁN LOS DEPARTAMENTOS POR REGIONES, 'NO', 'NE', 'NC', 'SC', 'SE', 'SO', 'LC', 'I'

df2 = df

# DELIMITACIÓN DE REGIONES GEOGRÁFICAMENTE SEGÚN CRITERIO DE CERCANÍA DE DEPARTAMENTOS
data=[
       ['TUMBES', 'PIURA', 'LAMBAYEQUE', 'CAJAMARCA'],     #NO
       ['AMAZONAS', 'LORETO', 'SAN MARTIN', 'UCAYALI'],    #NE
       ['LA LIBERTAD', 'ANCASH', 'HUANUCO', 'PASCO'],      #NC
       ['JUNIN', 'HUANCAVELICA', 'AYACUCHO', 'APURIMAC'],  #SC
       ['CUSCO', 'MADRE DE DIOS', 'PUNO'],                 #SE
       ['ICA', 'AREQUIPA', 'MOQUEGUA', 'TACNA'],           #SO
       ['CALLAO', 'LIMA']                                  #LC
     ]

def asignar_region(departamento):
  if departamento in data[0]:
    return 'NO'
  elif departamento in data[1]:
    return 'NE'
  elif departamento in data[2]:
    return 'NC'
  elif departamento in data[3]:
    return 'SC'
  elif departamento in data[4]:
    return 'SE'
  elif departamento in data[5]:
    return 'SO'
  elif departamento in data[6]:
      return 'LC'
  else:
    return 'I'

df2['DOMICILIO_ZONA'] = df['DOMICILIO_DEPA'].apply(asignar_region)

df2['COLEGIO_ZONA'] = df['COLEGIO_DEPA'].apply(asignar_region)

df2['NACIMIENTO_ZONA'] = df['NACIMIENTO_DEPA'].apply(asignar_region)

"""# DOMICILIO"""

# AGRUPACIÓN DE ALUMNOS POR 'DOMICILIO_ZONA' POR CICLO
df2.groupby(['CICLO','DOMICILIO_ZONA'])[['ALUMNOS']].count().unstack()

# AGRUPACIÓN DE ALUMNOS INGRESANTES POR 'DOMICILIO_ZONA' POR CICLO
df2[df2['INGRESO']=='SI'].groupby(['CICLO','DOMICILIO_ZONA'])[['ALUMNOS']].count().unstack()

# AGRUPACIÓN DE ALUMNOS INGRESANTES DIRECTO POR 'DOMICILIO_ZONA' POR CICLO
df2[(df2['INGRESO']=='SI') & (df2['MODO_INGRESO']=='DIRECTO')].groupby(['CICLO','DOMICILIO_ZONA'])[['ALUMNOS']].count().unstack()

"""# COLEGIO"""

# AGRUPACIÓN DE ALUMNOS POR 'COLEGIO_ZONA' POR CICLO
df2.groupby(['CICLO','COLEGIO_ZONA'])[['ALUMNOS']].count().unstack()

# AGRUPACIÓN DE ALUMNOS INGRESANTES POR 'COLEGIO_ZONA' POR CICLO
df2[df2['INGRESO']=='SI'].groupby(['CICLO','COLEGIO_ZONA'])[['ALUMNOS']].count().unstack()

# AGRUPACIÓN DE ALUMNOS INGRESANTES DIRECTO POR 'COLEGIO_ZONA' POR CICLO
df2[(df2['INGRESO']=='SI') & (df2['MODO_INGRESO']=='DIRECTO')].groupby(['CICLO','COLEGIO_ZONA'])[['ALUMNOS']].count().unstack()

"""# NACIMIENTO"""

# AGRUPACIÓN DE ALUMNOS POR 'NACIMIENTO_ZONA' POR CICLO
df2.groupby(['CICLO','NACIMIENTO_ZONA'])[['ALUMNOS']].count().unstack()

# AGRUPACIÓN DE ALUMNOS INGRESANTES POR 'NACIMIENTO_ZONA' POR CICLO
df2[df2['INGRESO']=='SI'].groupby(['CICLO','NACIMIENTO_ZONA'])[['ALUMNOS']].count().unstack()

# AGRUPACIÓN DE ALUMNOS INGRESANTES DIRECTO POR 'NACIMIENTO_ZONA' POR CICLO
df2[(df2['INGRESO']=='SI') & (df2['MODO_INGRESO']=='DIRECTO')].groupby(['CICLO','NACIMIENTO_ZONA'])[['ALUMNOS']].count().unstack()

# CONTABILIZAR ALUMNOS INGRESANTES POR CEPRE-UNI POR CICLO
conteo_colegio_zona_ingresante = df2[(df2['INGRESO']=='SI') & (df2['MODO_INGRESO']=='DIRECTO')].groupby('CICLO')[['COLEGIO_ZONA']].value_counts().unstack(fill_value=0)

# CALCULAR PORCENTAJES
porcentajes_colegio_zona_ingresante = (conteo_colegio_zona_ingresante.div(conteo_colegio_zona_ingresante.sum(axis=1), axis=0) * 100).round(2)

# CONCATENER AMBOS DF (CONTEO Y PORCENTAJE)
czi_df = pd.concat([conteo_colegio_zona_ingresante, porcentajes_colegio_zona_ingresante], axis=1, keys=['Conteo Ingresante', 'Porcentaje Ingresante'])

prom_czi = porcentajes_colegio_zona_ingresante.mean()

czi_df

# GRAFICAMOS EL DF RESULTADO CONSIDERANDO LC Y EL RESTO DE REGIONES
ax_czi_df=czi_df['Porcentaje Ingresante'].plot(kind='bar',figsize=(24,7),xlabel='CICLO',ylabel='CANTIDAD',title='% INGRESANTES POR COLEGIO ZONA POR CICLO',grid=True)
prom_czi_lc = str((prom_czi.loc['LC']).round(2))
prom_czi_nc = str((prom_czi.loc['NC']).round(2))
prom_czi_ne = str((prom_czi.loc['NE']).round(2))
prom_czi_no = str((prom_czi.loc['NO']).round(2))
prom_czi_sc = str((prom_czi.loc['SC']).round(2))
prom_czi_se = str((prom_czi.loc['SE']).round(2))
prom_czi_so = str((prom_czi.loc['SO']).round(2))
ax_czi_df.legend(['PROM LC: ' + prom_czi_lc + '%', 'PROM NC: ' + prom_czi_nc + '%', 'PROM NE: ' + prom_czi_ne + '%', 'PROM NO: ' + prom_czi_no + '%', 'PROM SC: ' + prom_czi_sc + '%', 'PROM SE: ' + prom_czi_se + '%', 'PROM SO: ' + prom_czi_so + '%'])
for container in ax_czi_df.containers:
    ax_czi_df.bar_label(container)

# GRAFICAMOS EL DF RESULTADO CONSIDERANDO EL RESTO DE REGIONES
ax_czip_df=czi_df[[('Porcentaje Ingresante', 'NC'),('Porcentaje Ingresante', 'NE'),('Porcentaje Ingresante', 'NO'),('Porcentaje Ingresante', 'SC'),('Porcentaje Ingresante', 'SE'),('Porcentaje Ingresante', 'SO')]].plot(kind='bar',figsize=(24,7),xlabel='CICLO',ylabel='CANTIDAD',title='% INGRESANTES POR COLEGIO ZONA EN PROVINCIA POR CICLO',grid=True)

ax_czip_df.legend(['PROM NC: ' + prom_czi_nc + '%', 'PROM NE: ' + prom_czi_ne + '%', 'PROM NO: ' + prom_czi_no + '%', 'PROM SC: ' + prom_czi_sc + '%', 'PROM SE: ' + prom_czi_se + '%', 'PROM SO: ' + prom_czi_so + '%'])
for container in ax_czip_df.containers:
    ax_czip_df.bar_label(container)

# GRAFICAMOS EL DF RESULTADO CONSIDERANDO LC
ax_czil_df=czi_df[('Porcentaje Ingresante', 'LC')].plot(kind='bar',figsize=(24,7),xlabel='CICLO',ylabel='CANTIDAD',title='% INGRESANTES POR COLEGIO ZONA EN LIMA POR CICLO',grid=True)

ax_czil_df.legend(['PROM LC: ' + prom_czi_lc + '%'])
for container in ax_czil_df.containers:
    ax_czil_df.bar_label(container)